---
import Markdown from "../Markdown.astro";
import CodeSpan from "../Pages/CodeSpan.astro";
import expressionToString from "./expression";

export interface Props {
  attributes: Array<{
    name: string;
    docstring?: {
      value: string;
    };
    annotation?: any;
  }>;
}

const { attributes } = Astro.props;
---

<ol>
  {
    attributes.map((attribute) => (
      <li>
        <div>
          <p class="name">
            <CodeSpan variant="simple">{attribute.name}:</CodeSpan>
          </p>
        </div>
        <div class="info content">
          {attribute.docstring && (
            <Markdown content={attribute.docstring.value} />
          )}

          <dl>
            {attribute.annotation && (
              <>
                <dt>Type</dt>
                <dd>
                  <CodeSpan>
                    {expressionToString(attribute.annotation)}
                  </CodeSpan>
                </dd>
              </>
            )}
          </dl>
        </div>
      </li>
    ))
  }
</ol>

<style>
  ol {
    list-style-type: none;
    padding: 0;
    display: grid;
    align-items: baseline;
    grid-template-columns: max-content 1fr;
    gap: 2rem;
  }

  li {
    display: contents;

    > div {
      height: 100%;
    }

    &:not(:last-child) > * {
      border-bottom: 1px solid var(--color-g-300);
      padding-bottom: 1.5rem;
    }

    p.name {
      font-size: 1.2rem;
      font-weight: bold;
    }
  }

  :global(html.dark) li {
    border-color: var(--color-g-800);
  }

  dl {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-gap: 0.5rem 1rem;
  }

  dt {
    font-weight: bold;
    color: var(--color-g-800);
  }

  dd {
    margin-left: 0;
  }
</style>
