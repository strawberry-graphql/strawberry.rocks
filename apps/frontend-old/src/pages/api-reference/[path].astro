---
import Layout from "../../layouts/Layout.astro";
import Function from "../../components/ApiDocs/Function.astro";
import Class from "../../components/ApiDocs/Class.astro";
import Module from "../../components/ApiDocs/Module.astro";
import Attribute from "../../components/ApiDocs/Attribute.astro";
import Sidebar from "../../components/Docs/Sidebar.astro";
import Nav from "../../components/ApiDocs/Nav.astro";
import CodeSpan from "../../components/Pages/CodeSpan.astro";
import data from "../../content/api/strawberry.json";
import { filterMembers } from "../../components/ApiDocs/utils/filter-members";

export async function getStaticPaths() {
  const paths: Array<{
    params: { path: string };
    props: { kind: string; path: string };
  }> = [];

  const addPaths = (members: any, currentPath: string) => {
    members = filterMembers(members);

    for (const member of members) {
      if (member.name?.startsWith("_")) {
        continue;
      }

      if (member.kind === "alias") {
        const path = `${currentPath}.${member.name}`;

        if (path.includes("*")) {
          continue;
        }

        paths.push({
          params: { path },
          props: { kind: member.kind, path },
        });
      }

      if (member.kind === "module") {
        paths.push({
          params: { path: `${currentPath}.${member.name}` },
          props: { kind: member.kind, path: `${currentPath}.${member.name}` },
        });

        addPaths(member.members, `${currentPath}.${member.name}`);
      }

      if (["class", "attribute", "function"].includes(member.kind)) {
        paths.push({
          params: { path: `${currentPath}.${member.name}` },
          props: { kind: member.kind, path: `${currentPath}.${member.name}` },
        });
      }
    }
  };

  addPaths(data.members, "strawberry");

  return paths;
}

const { path } = Astro.params;
const props = Astro.props;

// removing `strawberry.` from the path since the data start with strawberry
const parts = path.replace(/^strawberry\./, "").split(".");

const findMember = (parts: string[]) => {
  let current: any = data;

  for (const part of parts) {
    const sub = current.members.find((member: any) => member.name === part);

    if (!sub) {
      console.info("could not find", part, "for path", path);
      return Astro.redirect("/404");
    }

    current = sub;
  }

  return current;
};

let current = findMember(parts);

while (current.kind === "alias") {
  current = findMember(current.target_path.split(".").slice(1));
}

let name = current.name;

if (props.kind === "alias" || props.kind === "module") {
  name = props.path;
}

const githubLine = `#L${current.lineno}-L${current.endlineno}`;

const filepath = current.relative_filepath;
---

<Layout title="API Docs">
  <main class="docs-grid">
    <Sidebar><Nav /></Sidebar>

    <article id="docs-content">
      {
        current.kind === "function" && (
          <Function name={name} fun={current} topLevel />
        )
      }
      {current.kind === "class" && <Class name={name} klass={current} />}
      {
        current.kind === "module" && (
          <Module name={name} module={current} path={path} />
        )
      }
      {
        current.kind === "attribute" && (
          <Attribute name={name} attribute={current} />
        )
      }

      <footer>
        <p>
          <span class="typography-label"> File path: </span>
          <CodeSpan allowCopy>{filepath}</CodeSpan>
        </p>
        <p class="typography-label">
          <a
            href={`https://github.com/strawberry-graphql/strawberry/blob/main/${filepath}${githubLine}`}
            target="_blank"
            rel="noopener noreferrer">Open in GitHub</a
          >
        </p>
      </footer>

      {
        process.env.NODE_ENV === "development" && (
          <details>
            <summary>debug json</summary>
            <pre>{JSON.stringify(current, null, 2)}</pre>
          </details>
        )
      }
    </article>
  </main>
</Layout>

<style>
  #docs-content {
    grid-column-end: page-nav-end;
  }

  footer {
    margin-top: 24px !important;
    padding-top: 24px;
    border-top: 1px solid var(--color-g-100);
    display: flex;
    flex-direction: column;
    gap: 24px;
  }
</style>
