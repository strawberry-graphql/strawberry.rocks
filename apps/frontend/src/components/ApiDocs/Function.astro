---
import Markdown from "../Markdown.astro";
import CodeSpan from "../Pages/CodeSpan.astro";
import Table from "../Pages/Table.astro";
import Expression from "./Expression.astro";

export interface Props {
  fun: {
    name: string;
  };
}

const { fun } = Astro.props;

const parsedParameters = fun.docstring.parsed.find(
  (item) => item.kind === "parameters",
);

const parametersDescriptions = parsedParameters
  ? parsedParameters.value.reduce((acc, item) => {
      console.log(item);
      acc[item.name] = item.description;
      return acc;
    }, {})
  : {};
---

<h1>{fun.name}</h1>

<Markdown content={fun.docstring.value} />

<h2>Parameters</h2>

<Table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th>Kind</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    {
      fun.parameters.map((param) => (
        <tr>
          <td>{param.name}</td>
          <td>
            <CodeSpan><Expression expr={param.annotation} /></CodeSpan>
          </td>
          <td>
            <CodeSpan>
              <Expression expr={param.default} />
            </CodeSpan>
          </td>
          <td>{param.kind}</td>
          <td>
            {parametersDescriptions[param.name] && (
              <Markdown content={parametersDescriptions[param.name]} />
            )}
          </td>
        </tr>
      ))
    }
  </tbody>
</Table>
