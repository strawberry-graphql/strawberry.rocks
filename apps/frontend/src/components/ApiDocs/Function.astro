---
import Markdown from "../Markdown.astro";
import FunctionSignature from "./FunctionSignature.astro";
import ParametersList from "./ParametersList.astro";

export interface Props {
  name: string;
  fun: {
    name: string;
  };
  topLevel?: boolean;
}

const { name, fun, topLevel = false } = Astro.props;

const parsedParameters = fun.docstring?.parsed.find(
  (item) => item.kind === "parameters",
);

const parametersDescriptions = parsedParameters
  ? parsedParameters.value.reduce((acc, item) => {
      acc[item.name] = item.description;
      return acc;
    }, {})
  : {};

const PARAMATERS_TO_SKIP = ["self", "cls"];
const parameters = fun.parameters.filter(
  (param) => !PARAMATERS_TO_SKIP.includes(param.name),
);

const Component = topLevel ? "div" : "details";
const Summary = topLevel ? "div" : "summary";
---

<Component class="function">
  <Summary>
    <h1 class="typography-code">{name}</h1>
  </Summary>

  <div class="content">
    {fun.docstring?.value && <Markdown content={fun.docstring.value} />}
  </div>

  <div class="content">
    <h2>Signature:</h2>

    <FunctionSignature fun={fun} />
  </div>
  {
    parameters.length > 0 && (
      <div class="content">
        <h2>Parameters:</h2>

        <ParametersList
          parameters={parameters}
          parametersDescriptions={parametersDescriptions}
        />
      </div>
    )
  }
</Component>

<style>
  .function *:not(:first-child) + * {
    margin-top: 2rem;
  }

  .function :first-child + * {
    margin-top: 1rem;
  }

  h1 {
    font-size: 1.5rem;
  }

  h2 {
    margin-block: 1rem;
    font-size: 1.5rem;
  }

  summary {
    cursor: pointer;
    list-style: none;

    &::-webkit-details-marker {
      display: none;
    }

    h1::after {
      font-size: 0.7em;
      vertical-align: middle;
      display: inline-block;
      margin-left: 0.5em;
    }
  }

  summary {
    h1::after {
      content: "▼";
    }
  }

  details[open] summary h1::after {
    content: "▲";
  }
</style>
