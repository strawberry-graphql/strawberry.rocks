---
import Markdown from "../Markdown.astro";
import CodeSpan from "../Pages/CodeSpan.astro";
import Expression from "./Expression";

export interface Props {
  parameters: any;
  parametersDescriptions: any;
}

const { parametersDescriptions } = Astro.props;

const PARAMS_TO_IGNORE = ["self"];

const parameters = Astro.props.parameters.filter(
  (param) => !PARAMS_TO_IGNORE.includes(param.name),
);
---

<ol>
  {
    parameters.map((param) => (
      <li>
        <div>
          <p class="name">
            <CodeSpan variant="simple">{param.name}</CodeSpan>
          </p>
        </div>
        <div>
          {parametersDescriptions[param.name] && (
            <Markdown content={parametersDescriptions[param.name]} />
          )}

          <dl>
            {param.annotation && (
              <>
                <dt>Type</dt>
                <dd>
                  <CodeSpan>
                    <Expression expr={param.annotation} />
                  </CodeSpan>
                </dd>
              </>
            )}

            {param.default && (
              <>
                <dt>Default</dt>
                <dd>
                  <CodeSpan>
                    <Expression expr={param.default} />
                  </CodeSpan>
                </dd>
              </>
            )}
          </dl>
        </div>
      </li>
    ))
  }
</ol>

<style>
  ol {
    list-style-type: none;
    padding: 0;

    display: grid;
    grid-template-columns: max-content 1fr;
    gap: 1.5rem;
  }

  li {
    display: contents;

    &:not(:last-child) > * {
      border-bottom: 1px solid var(--color-g-300);
      padding-bottom: 1.5rem;
    }

    p.name {
      font-size: 1.2rem;
      font-weight: bold;
    }
  }

  :global(html.dark) li {
    border-color: var(--color-g-800);
  }

  dl {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-gap: 0.5rem 1rem;
    margin-top: 1rem;
  }

  dt {
    font-weight: bold;
    color: var(--color-g-800);
  }

  dd {
    margin-left: 0;
  }
</style>
