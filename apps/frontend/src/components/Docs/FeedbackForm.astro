---
import Button from "../Button.astro";
import Textarea from "../Form/Textarea.astro";
import Paragraph from "../Pages/Paragraph.astro";

const FEEDBACK_OPTIONS = [
  {
    emoji: "😭",
    label: "Not at all",
    placeholder:
      "Write something specific about why this page wasn't helpful, we read all the feedback (they are posted on our discord server) ✨",
    buttonLabel: "Send feedback 😭",
  },
  {
    emoji: "😕",
    label: "It is a bit confusing",
    placeholder:
      "Write something specific about why this page was confusing, we read all the feedback (they are posted on our discord server) ✨",
    buttonLabel: "Send feedback 😕",
  },
  {
    emoji: "😃",
    label: "Yes",
    placeholder:
      "Write something specific about why this page was helpful, we read all the feedback (they are posted on our discord server) ✨",
    buttonLabel: "Send feedback 😃",
  },
  {
    emoji: "🤩",
    label: "Yes, very much",
    placeholder:
      "💖 Write something specific about why this page was helpful, we read all the feedback (they are posted on our discord server) ✨",
    buttonLabel: "💖 Send feedback 🤩",
  },
];

const url = new URL(Astro.request.url);
---

<form class="feedback-form" id="feedback-form" method="POST">
  <header>
    <Paragraph small>Was this page helpful?</Paragraph>

    <div class="options typography-paragraph-2">
      {
        FEEDBACK_OPTIONS.map((option) => (
          <label>
            <input
              type="radio"
              id={option.label}
              name="sentiment"
              value={option.emoji}
            />
            {option.emoji}
          </label>
        ))
      }
    </div>
  </header>

  <div>
    <input type="hidden" name="url" value={url.pathname} />
    <Textarea
      placeholder={"Make sure to write actionable feedback, we read all the feedback (they are posted on our discord server) ✨"}
      required
      name="feedback"
    />

    <Button type="submit" as="button">Send feedback</Button>
  </div>

  <p class="typography-body-2 status hidden">
    Thank you for your feedback! 🙏 It's been posted on our <a href="https://strawberry.rocks/discord" target="_blank">Discord server<a/> where our community discusses improvements. Feel free to join and follow up on the conversation!
  </p>

  <p class="typography-body-2 status status-error hidden">
    Something went wrong. Please try again.
  </p>
</form>

<style>
  .options {
    display: flex;
    gap: 4px;
    margin-left: 12px;
  }

  header {
    display: flex;
    align-items: center;
    font-weight: bold;
  }

  form :global(textarea) {
    min-height: 120px;
    margin-bottom: 12px;
    margin-top: 12px;
    display: none;
  }

  form :global(button) {
    display: none;
  }

  form:has(input[type="radio"]:checked) :global(:is(textarea, button)) {
    display: block;
  }

  label {
    border: 1px solid var(--color-g-100);
    border-radius: 4px;
    width: 28px;
    height: 28px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    position: relative;

    &:hover {
      background-color: var(--color-g-100);
    }

    input {
      opacity: 0;
      position: absolute;
      inset: 0;
      cursor: pointer;
    }
  }

  label:has(input[type="radio"]:checked) {
    background: linear-gradient(
      to right,
      var(--color-strawberry) 0%,
      var(--color-orange) 100%
    );
  }

  :global(html.dark) .feedback-form {
    label {
      border-color: var(--color-g-900);
    }

    label:hover {
      background-color: var(--color-g-900);
    }

    label:has(input[type="radio"]:checked) {
      background: linear-gradient(
        to right,
        var(--color-strawberry) 0%,
        var(--color-orange) 100%
      );
    }
  }
</style>

<script>
  import { actions } from "astro:actions";

  const forms = document.querySelectorAll("form.feedback-form");

  // TODO: check how to remove this code duplication
  const options = [
    {
      emoji: "😭",
      label: "Not at all",
      placeholder:
        "Write something specific about why this page wasn't helpful, we read all the feedback (they are posted on our discord server) ✨",
      buttonLabel: "Send feedback 😭",
    },
    {
      emoji: "😕",
      label: "It is a bit confusing",
      placeholder:
        "Write something specific about why this page was confusing, we read all the feedback (they are posted on our discord server) ✨",
      buttonLabel: "Send feedback 😕",
    },
    {
      emoji: "😃",
      label: "Yes",
      placeholder:
        "Write something specific about why this page was helpful, we read all the feedback (they are posted on our discord server) ✨",
      buttonLabel: "Send feedback 😃",
    },
    {
      emoji: "🤩",
      label: "Yes, very much",
      placeholder:
        "💖 Write something specific about why this page was helpful, we read all the feedback (they are posted on our discord server) ✨",
      buttonLabel: "💖 Send feedback 🤩",
    },
  ];

  forms.forEach((form) => {
    const radioButtons = form.querySelectorAll("input[type=radio]");

    radioButtons.forEach((radioButton) => {
      radioButton.addEventListener("change", (event) => {
        const selectedOption = options.find(
          // @ts-ignore
          (option) => option.emoji === event.target?.value,
        )!;

        form.querySelector("textarea")!.placeholder =
          selectedOption.placeholder;
        form.querySelector("button .text")!.textContent =
          selectedOption.buttonLabel;
      });
    });

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // @ts-ignore
      const formData = new FormData(event.target);

      const { data, error } = await actions.sendFeedback({
        sentiment: formData.get("sentiment")!.toString(),
        feedback: formData.get("feedback")!.toString(),
        url: formData.get("url")!.toString(),
      });

      if (error) {
        form.querySelector(".status-error")!.classList.remove("hidden");
        return;
      }

      if (data) {
        form.querySelector(".status")!.classList.remove("hidden");
        form.querySelector("textarea")!.value = "";

        radioButtons.forEach((radioButton) => {
          // @ts-ignore
          radioButton.checked = false;
        });
      }
    });
  });
</script>
