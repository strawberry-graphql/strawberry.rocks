---
import { getEntry } from "astro:content";
import NavLink from "./NavLink.astro";
import VerticalArrow from "../Icons/VerticalArrow.astro";
import { getTree } from "../../utils/get-tree";

const { number } = Astro.params;

const readme = await getEntry("docs", "readme");

const prefix = number ? `/docs/pr/${number}/` : "/docs/";

const tree = getTree(readme.body, prefix);
---

<nav>
  <ul>
    {
      Object.values(tree).map((entry) => (
        <li>
          {entry.type === "section" ? (
            <details open>
              <summary class="typography-label">
                {entry.name}

                <VerticalArrow />
              </summary>
              <ul>
                {entry.links.map((child) => (
                  <li>
                    <NavLink href={child.href} text={child.text} />
                  </li>
                ))}
              </ul>
            </details>
          ) : (
            <NavLink href={entry.href} text={entry.text} />
          )}
        </li>
      ))
    }
  </ul>
</nav>

<style>
  ul {
    display: flex;
    gap: 16px;
    flex-direction: column;

    @media (min-width: 768px) {
      max-width: 300px;
    }
  }

  nav ul ul {
    margin-bottom: 8px;
    border-left: 1px solid var(--color-g-200);
    gap: 12px;
  }

  :global(html.dark) nav ul ul {
    border-color: var(--color-g-500);
  }

  details summary {
    list-style: none;
    margin-bottom: 8px;
    cursor: pointer;
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
  }

  details summary::-webkit-details-marker {
    display: none;
  }

  details summary :global(svg) {
    transition: transform 0.2s ease-in-out;
    stroke: var(--color-g-500);
  }

  :global(html.dark) details summary :global(svg) {
    stroke: var(--color-g-700);
  }

  details[open] summary :global(svg) {
    transform: rotate(180deg);
  }
</style>
