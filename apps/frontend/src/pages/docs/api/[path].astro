---
import { promises as fs } from "fs";
import Layout from "../../../layouts/Layout.astro";
import Function from "../../../components/ApiDocs/Function.astro";
import Class from "../../../components/ApiDocs/Class.astro";
import Module from "../../../components/ApiDocs/Module.astro";
import Attribute from "../../../components/ApiDocs/Attribute.astro";
import Sidebar from "../../../components/Docs/Sidebar.astro";
import Nav from "../../../components/ApiDocs/Nav.astro";

export async function getStaticPaths() {
  const data = JSON.parse(
    await fs.readFile("./src/content/api/strawberry.json", "utf-8"),
  );

  const paths: Array<{
    params: { path: string };
    props: { kind: string; path: string };
  }> = [];

  const addPaths = (members: any, currentPath: string) => {
    for (const member of members) {
      if (member.kind === "alias") {
        const path = `${currentPath}.${member.name}`;

        paths.push({
          params: { path },
          props: { kind: member.kind, path },
        });
      }

      if (member.kind === "module") {
        paths.push({
          params: { path: `${currentPath}.${member.name}` },
          props: { kind: member.kind, path: `${currentPath}.${member.name}` },
        });

        // addPaths(member.members, `${currentPath}.${member.name}`);
      }
    }
  };

  addPaths(data.members, "strawberry");

  return paths;
}

const data = JSON.parse(
  await fs.readFile("./src/content/api/strawberry.json", "utf-8"),
);

const { path } = Astro.params;
const props = Astro.props;

const parts = path.split(".").slice(1);
const findMember = (parts: string[]) => {
  let current = data;

  for (const part of parts) {
    const sub = current.members.find((member) => member.name === part);

    if (!sub) {
      throw new Error(`Could not find member ${part}`);
    }

    current = sub;
  }

  return current;
};

let current = findMember(parts);

while (current.kind === "alias") {
  current = findMember(current.target_path.split(".").slice(1));
}

let name = current.name;

if (props.kind === "alias" || props.kind === "module") {
  name = props.path;
}
---

<Layout title="API Docs">
  <main class="docs-grid">
    <Sidebar><Nav /></Sidebar>

    <article>
      {
        current.kind === "function" && (
          <Function name={name} fun={current} topLevel />
        )
      }
      {current.kind === "class" && <Class name={name} klass={current} />}
      {current.kind === "module" && <Module name={name} module={current} />}
      {
        current.kind === "attribute" && (
          <Attribute name={name} attribute={current} />
        )
      }
      <details>
        <summary>debug json</summary>
        <pre>{JSON.stringify(current, null, 2)}</pre>
      </details>
    </article>
  </main>
</Layout>
